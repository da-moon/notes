#!/usr/bin/env bash
#-*-mode:sh;indent-tabs-mode:nil;tab-width:2;coding:utf-8-*-
# vi: ft=sh tabstop=2 shiftwidth=2 softtabstop=2 expandtab:

set -euo pipefail

# ─── INITIAL CHECKS AND SETUP ───────────────────────────────────────────────────

if ! command -- sudo -h > /dev/null 2>&1 ; then
  echo >&2 '*** Please install "sudo" package'
  exit 1
fi
if [[ $EUID -eq 0 ]]; then
  echo >&2 "*** You must run this script as non-root user with sudo permission." ;
  exit 1
fi
echo >&2 '*** running full system upgrade.';
sudo pacman --noconfirm -Syyu ;

# ─── REMOVING CONFLICTING PACKAGES ──────────────────────────────────────────────

conflicting_packages=()
conflicting_packages+=("qemu-headless")
if [ ${#conflicting_packages[@]} -ne 0 ]; then
  echo >&2 "*** ensuring conflicting packages are uninstalled.";
  for pkg in "${conflicting_packages[@]}"; do
    echo >&2 "*** ensuring ${pkg} has been removed.";
    pacman -Qi "${pkg}" > /dev/null 2>&1 && sudo pacman  -Rcns --noconfirm "${pkg}"  > /dev/null 2>&1 ;
  done
fi
echo >&2 "*** removing unused packages.";
sudo pacman -Qdtq | xargs -r sudo pacman -Rcns --noconfirm

# ─── INSTALLING PACMAN PACKAGES ─────────────────────────────────────────────────

pacman_packages=()
# [ NOTE ] => for building aur packages
pacman_packages+=("git")
# [ NOTE ] => base-devel group
# pacman_packages+=($(pacman -Qg base-devel | awk '{print $2}'))
pacman_packages+=("autoconf")
pacman_packages+=("automake")
pacman_packages+=("binutils")
pacman_packages+=("bison")
pacman_packages+=("fakeroot")
pacman_packages+=("file")
pacman_packages+=("findutils")
pacman_packages+=("flex")
pacman_packages+=("gawk")
pacman_packages+=("gcc")
pacman_packages+=("gettext")
pacman_packages+=("grep")
pacman_packages+=("groff")
pacman_packages+=("gzip")
pacman_packages+=("libtool")
pacman_packages+=("m4")
pacman_packages+=("make")
pacman_packages+=("pacman")
pacman_packages+=("patch")
pacman_packages+=("pkgconf")
pacman_packages+=("sed")
pacman_packages+=("sudo")
pacman_packages+=("texinfo")
pacman_packages+=("which")
# [ NOTE# ] => libvirt
pacman_packages+=("libvirt") ;
pacman_packages+=("virt-install") ;
pacman_packages+=("qemu") ;
pacman_packages+=("qemu-arch-extra") ;
pacman_packages+=("virt-manager") ;
pacman_packages+=("dnsmasq") ;
pacman_packages+=("bridge-utils") ;
if [ ${#pacman_packages[@]} -ne 0 ]; then
  for pkg in "${pacman_packages[@]}"; do
    echo >&2 "*** ensuring ${pkg} is installed.";
   ! pacman -Qi "${pkg}" > /dev/null 2>&1 && yes | sudo pacman -S "${pkg}"  > /dev/null 2>&1 ;
  done
fi

# ─── KERNEL MODULES SETUP ───────────────────────────────────────────────────────

kernel_modules=();
kernel_modules+=("9p")
kernel_modules+=("9pnet")
kernel_modules+=("9pnet_virtio")
kernel_modules+=("virtio")
kernel_modules+=("virtio-net")
if [ ${#kernel_modules[@]} -ne 0 ]; then
  for mod in "${kernel_modules[@]}"; do
    echo >&2 "*** removing any exisiting '${mod}' kernel module autoload value.";
    [ -r /etc/modules ] && sudo sed -i "/$mod/d" /etc/modules
    if [ -d /etc/modules-load.d ]; then
      find /etc/modules-load.d -type f -name '*.conf' \
      | xargs -r sudo sed -i "/$mod/d" ;
      sudo find /etc/modules-load.d -type f -empty -delete ;
    fi
  done
  for mod in "${kernel_modules[@]}"; do
    echo >&2 "*** ensuring '${mod}' kernel module is loaded.";
    sudo modprobe "${mod}"
    echo "${mod}" | sudo tee "/etc/modules-load.d/${mod}.conf" > /dev/null ;
  done
fi

# ─── USERGROUP SETUP ────────────────────────────────────────────────────────────

groups=($(getent group | /bin/grep -E 'libvirt|kvm' | cut -f1 -d:))
if [ ${#groups[@]} -ne 0 ]; then
  for grp in "${groups[@]}"; do
    echo >&2 "*** ensuring user '$(whoami)' belongs to '${grp}' group.";
    sudo usermod -aG "${grp}" "$(whoami)" ;
  done
fi

# ─── LIBVIRTD SETUP ─────────────────────────────────────────────────────────────

if [ -r /etc/libvirt/libvirtd.conf ]; then
  echo >&2 "*** configuring libvirtd" ;
  unix_sock_group=$(getent group | /bin/grep -E 'libvirt' | cut -f1 -d: | head -n 1) ;
  sudo sed -i \
    -e '/unix_sock_group/d' \
    -e '/unix_sock_rw_perms/d' \
    -e '/auth_unix_ro/d' \
    -e '/auth_unix_rw/d' \
  /etc/libvirt/libvirtd.conf ;
  (
    echo "unix_sock_group = \"${unix_sock_group}\"" ;
    echo "unix_sock_rw_perms = \"0770\"" ;
    echo "auth_unix_ro = \"none\"" ;
    echo "auth_unix_rw = \"none\"" ;
  ) | sudo tee -a /etc/libvirt/libvirtd.conf > /dev/null ;

fi

# ─── QEMU CONFIGURATION ─────────────────────────────────────────────────────────

if [ -r /etc/libvirt/qemu.conf ]; then
  echo >&2 "*** configuring qemu" ;
  # -e '/user\s*=/d' \
  # -e '/group\s*=/d' \
  sudo sed -i \
  -e '/dynamic_ownership\s*=/d' \
  /etc/libvirt/qemu.conf
  (
    # echo "user = $(id -u)" ;
    # echo "group = $(id -g)" ;
    echo "dynamic_ownership = 1" ;
  ) | sudo tee -a /etc/libvirt/qemu.conf > /dev/null ;
fi

# ─── SYSTEMD SETUP ──────────────────────────────────────────────────────────────

echo >&2 "*** ensuring libvirtd service starts in traditional mode"
sudo systemctl mask libvirtd.socket libvirtd-ro.socket libvirtd-admin.socket libvirtd-tls.socket libvirtd-tcp.socket > /dev/null 2>&1
sudo systemctl disable --now libvirtd-tcp.socket > /dev/null 2>&1 || true
sudo systemctl enable --now libvirtd > /dev/null 2>&1 ;
sudo systemctl restart libvirtd
! sudo systemctl is-active libvirtd > /dev/null 2>&1 && (
echo >&2 '*** libvirtd service is not active';
sudo systemctl status libvirtd --lines=0 | more ;
exit 1;
)
